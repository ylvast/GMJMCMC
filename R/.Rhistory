return(paste("(",factor1,"*",factor2,")",sep=""))
} else {
return(paste(factor1,"*",factor2,sep=""))
}
}
if (expression[[1]]=="Sum"){
depth <- depth+1
addend1 <- convert_to_string(expression[[2]][[1]],transforms,labels,depth,TRUE)
addend2 <- convert_to_string(expression[[2]][[2]],transforms,labels,depth,TRUE)
if (depth==1){
return(paste(addend1,"+",addend2, sep=""))
}
else if (parenthesize){
return(paste("(",addend1,"+",addend2,")", sep=""))
} else {
return(paste(addend1,"+",addend2, sep=""))
}
}
}
startsWith(feature4$eq[[1]],"P")
print.feature <- function(feature, transforms, labels=FALSE){
equation <- feature$eq
string <- convert_to_string(equation,transforms, labels)
return(string)
}
#convert_to_string(feature1$eq, c("sin","cos"))
print.feature(feature4, c("sin","cos","Transform"),labels=c("Høyde","Lengde","Størrelse","Cm","Alder","Transport","Kloakk"))
print.feature(testing, c("sin","cos","Transform"))
testing
flat_elements_s <- unlist(feature4$eq[-1])
switch <- sample(c(1:length(flat_elements_s)), 1)
switch_final <- flat_elements_s[switch]
count <- sum(flat_elements_s[1:switch]==switch_final)
test2 <- drop_switch_feature(feature4$eq[-1],count,switch_final,feature3$eq)
testing <- list(feature4$eq[[1]],test1)
testing
flat_elements_s <- unlist(feature4$eq[-1])
switch <- sample(c(1:length(flat_elements_s)), 1)
switch_final <- flat_elements_s[switch]
count <- sum(flat_elements_s[1:switch]==switch_final)
test2 <- drop_switch_feature(feature4$eq[-1],count,switch_final,feature3$eq)
testing <- list(feature4$eq[[1]],test1)
testing$eq[[1]]
flat_elements_s <- unlist(feature4$eq[-1])
switch <- sample(c(1:length(flat_elements_s)), 1)
switch_final <- flat_elements_s[switch]
count <- sum(flat_elements_s[1:switch]==switch_final)
test2 <- drop_switch_feature(feature4$eq[-1],count,switch_final,feature3$eq)
testing <- c(feature4$eq[[1]],test1)
testing$eq[[1]]
flat_elements_s <- unlist(feature4$eq[-1])
switch <- sample(c(1:length(flat_elements_s)), 1)
switch_final <- flat_elements_s[switch]
count <- sum(flat_elements_s[1:switch]==switch_final)
test2 <- drop_switch_feature(feature4$eq[-1],count,switch_final,feature3$eq)
testing <- c(feature4$eq[[1]],test1)
testing$eq
flat_elements_s <- unlist(feature4$eq[-1])
switch <- sample(c(1:length(flat_elements_s)), 1)
switch_final <- flat_elements_s[switch]
count <- sum(flat_elements_s[1:switch]==switch_final)
test2 <- drop_switch_feature(feature4$eq[-1],count,switch_final,feature3$eq)
testing <- list(eq=c(feature4$eq[1],test1))
knitr::opts_chunk$set(echo = TRUE)
feature1 <- list(eq=list("Prod",list(list("sin",list(1)),list("x1"))), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature2 <- list(eq=list("Prod",list(list("sin",list(1)),list("x1"))), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature3 <- list(eq=list("x1"), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature5 <- list(eq=list("x2"), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature6 <- list(eq=list("x3"), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature7 <- list(eq=list("x4"), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature8 <- list(eq=list("x5"), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature9 <- list(eq=list("x6"), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
features_short <- list(feature5,feature6,feature7,feature3,feature8,feature9)
feature4 <- list(eq=list("Prod",list(list("sin",list(1)),list("sin",list("Sum",list(list("x1"),list("x2")))))), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
features <- list(feature1,feature2)
drop_switch_feature <- function(lst, count, target, replacement = NULL) {
for (i in seq_along(lst)) {
if (is.list(lst[[i]])) {
# If the first element matches `switch`, replace the entire sublist
if (!(is.list(lst[[i]][[1]])) && (lst[[i]][[1]] == target)) {
count <- count - 1
if (count == 0) {
if (is.null(replacement)) {
which_keep <- sample.int(2,1)
lst[[i]] <- lst[[i]][[2]][[which_keep]]
} else {
lst[[i]] <- replacement
}
return(lst)
}
}
lst[[i]] <- drop_switch_feature(lst[[i]], count, target, replacement)
}
}
return(lst)  # Return the modified list
}
flat_elements_s <- unlist(feature4$eq[-1])
switch <- sample(c(1:length(flat_elements_s)), 1)
switch_final <- flat_elements_s[switch]
count <- sum(flat_elements_s[1:switch]==switch_final)
test2 <- drop_switch_feature(feature4$eq[-1],count,switch_final,feature3$eq)
testing <- list(eq=c(feature4$eq[1],test1))
class(feature4) <- "feature"
flat_elements <- unlist(feature4$eq)
# Filter elements that are either "Sum" or "Prod"
filtered_elements <- flat_elements[flat_elements %in% c("Sum", "Prod")]
# Randomly sample from "sin", 1, or "y"
switch <- sample(c(1:length(filtered_elements)), 1)
switch_final <- filtered_elements[switch]
count <- sum(filtered_elements[1:switch]==switch_final)
drop_switch_feature(feature4$eq,count,switch_final)
feat.count <- sample.int(n = (min(5, (length(features_short)))-1), size = 1)
feats <- sample.int(n = length(features_short), size = feat.count)
eqs <- features_short[feats]
alphas <- rep(2,length(eqs)+1)
equations <- vector("list", length = length(feats))
for (i in c(1:length(feats))){
current <- eqs[[i]]$eq
equations[[i]] <- list("Prod",list(list(alphas[i+1]),current))
}
sum_equations <- function(equations) {
# Base case: if there's only one equation, return it
if (length(equations) == 1) {
return(equations[[1]])
}
# Recursive case: sum the first equation and the result of summing the rest
return(list("Sum", list(equations[[1]], sum_equations(equations[-1]))))
}
sum <- list("Sum",list(list(alphas[1]),sum_equations(equations)))
equation <- list("Transform",sum)
equation
convert_to_string <- function(expression, transforms, parenthesize = TRUE) {
if (!(expression[[1]] %in% c(transforms,"Prod","Sum"))){
return(expression[[1]])
}
if (expression[[1]] %in% transforms){
transform <- expression[[1]]
variable <- convert_to_string(expression[[2]],transforms,depth,FALSE)
return(paste(transform,"(",variable,")",sep=""))
}
if (expression[[1]]=="Prod"){
depth <- depth+1
factor1 <- convert_to_string(expression[[2]][[1]],depth,transforms)
factor2 <- convert_to_string(expression[[2]][[2]],depth,transforms)
if (parenthesize){
return(paste("(",factor1,"*",factor2,")",sep=""))
} else {
return(paste(factor1,"*",factor2,sep=""))
}
}
if (expression[[1]]=="Sum"){
depth <- depth+1
addend1 <- convert_to_string(expression[[2]][[1]],depth,transforms)
addend2 <- convert_to_string(expression[[2]][[2]],depth,transforms)
if (parenthesize){
return(paste("(",addend1,"+",addend2,")", sep=""))
} else {
return(paste(addend1,"+",addend2, sep=""))
}
}
}
convert_to_string <- function(expression, transforms, labels = FALSE, depth = 0, parenthesize = TRUE) {
if (!(expression[[1]] %in% c(transforms,"Prod","Sum"))){
depth <- depth+1
if (labels[1]!=FALSE && is.character(expression[[1]])){
if (startsWith(expression[[1]],"x")){
index <- strtoi(sub("^x", "", expression[[1]]))
return(labels[index])
}
}
return(expression[[1]])
}
if (expression[[1]] %in% transforms){
depth <- depth+1
transform <- expression[[1]]
variable <- convert_to_string(expression[[2]],transforms,labels,depth,FALSE)
return(paste(transform,"(",variable,")",sep=""))
}
if (expression[[1]]=="Prod"){
depth <- depth+1
factor1 <- convert_to_string(expression[[2]][[1]],transforms,labels,depth,TRUE)
factor2 <- convert_to_string(expression[[2]][[2]],transforms,labels,depth,TRUE)
if (depth==1){
return(paste(factor1,"*",factor2,sep=""))
}
else if (parenthesize){
return(paste("(",factor1,"*",factor2,")",sep=""))
} else {
return(paste(factor1,"*",factor2,sep=""))
}
}
if (expression[[1]]=="Sum"){
depth <- depth+1
addend1 <- convert_to_string(expression[[2]][[1]],transforms,labels,depth,TRUE)
addend2 <- convert_to_string(expression[[2]][[2]],transforms,labels,depth,TRUE)
if (depth==1){
return(paste(addend1,"+",addend2, sep=""))
}
else if (parenthesize){
return(paste("(",addend1,"+",addend2,")", sep=""))
} else {
return(paste(addend1,"+",addend2, sep=""))
}
}
}
testing
print.feature <- function(feature, transforms, labels=FALSE){
equation <- feature$eq
string <- convert_to_string(equation,transforms, labels)
return(string)
}
#convert_to_string(feature1$eq, c("sin","cos"))
print.feature(feature4, c("sin","cos","Transform"),labels=c("Høyde","Lengde","Størrelse","Cm","Alder","Transport","Kloakk"))
print.feature(testing, c("sin","cos","Transform"))
find_oc <- function(equation,transforms){
flat_elements <- unlist(features[[feat]]$eq)
filtered_elements <- flat_elements[flat_elements %in% c(transforms,"Sum", "Prod")]
oc <- length(filtered_elements)
}
find_oc(feature4$eq,c("sin","cos"))
find_oc <- function(equation,transforms){
flat_elements <- unlist(equation)
filtered_elements <- flat_elements[flat_elements %in% c(transforms,"Sum", "Prod")]
oc <- length(filtered_elements)
}
find_oc <- function(equation,transforms){
flat_elements <- unlist(equation)
filtered_elements <- flat_elements[flat_elements %in% c(transforms,"Sum", "Prod")]
oc <- length(filtered_elements)
return(oc)
}
find_oc(feature4$eq,c("sin","cos"))
print.feature <- function(feature, transforms, labels=FALSE){
equation <- feature$eq
string <- convert_to_string(equation,transforms, labels)
return(string)
}
print.feature(feature4, c("sin","cos","Transform"),labels=c("Høyde","Lengde","Størrelse","Cm","Alder","Transport","Kloakk"))
print.feature(testing, c("sin","cos","Transform"))
find_oc(feature4$eq,c("sin","cos"))
find_oc(feature1$eq,c("sin","cos"))
find_oc(feature4$eq,c("sin","cos"))
find_oc(feature1$eq,c("sin","cos"))
find_oc(list("Prod",list(feature4$eq,feature1$eq)),c("sin","cos"))
is.list(feature4)
feat.count <- sample.int(n = (min(5, (length(features_short)))-1), size = 1)
feats <- sample.int(n = length(features_short), size = feat.count)
eqs <- features_short[feats]
alphas <- rep(2.2222,length(eqs)+1)
equations <- vector("list", length = length(feats))
for (i in c(1:length(feats))){
current <- eqs[[i]]$eq
equations[[i]] <- list("Prod",list(list(alphas[i+1]),current))
}
sum_equations <- function(equations) {
# Base case: if there's only one equation, return it
if (length(equations) == 1) {
return(equations[[1]])
}
# Recursive case: sum the first equation and the result of summing the rest
return(list("Sum", list(equations[[1]], sum_equations(equations[-1]))))
}
sum <- list("Sum",list(list(alphas[1]),sum_equations(equations)))
equation <- list("Transform",sum)
is.integer(2)
is.float(2)
is.numeric(2)
is.numeric(FALSE)
knitr::opts_chunk$set(echo = TRUE)
feature1 <- list(eq=list("Prod",list(list("sin",list(1)),list("x1"))), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature2 <- list(eq=list("Prod",list(list("sin",list(1)),list("x1"))), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature3 <- list(eq=list("x1"), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature5 <- list(eq=list("x2"), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature6 <- list(eq=list("x3"), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature7 <- list(eq=list("x4"), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature8 <- list(eq=list("x5"), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
feature9 <- list(eq=list("x6"), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
features_short <- list(feature5,feature6,feature7,feature3,feature8,feature9)
feature4 <- list(eq=list("Prod",list(list("sin",list(1)),list("sin",list("Sum",list(list("x1"),list("x2")))))), depth=2.5, width=1, oc=2, alphas=list(1,1,1))
features <- list(feature1,feature2)
drop_switch_feature <- function(lst, count, target, replacement = NULL) {
for (i in seq_along(lst)) {
if (is.list(lst[[i]])) {
# If the first element matches `switch`, replace the entire sublist
if (!(is.list(lst[[i]][[1]])) && (lst[[i]][[1]] == target)) {
count <- count - 1
if (count == 0) {
if (is.null(replacement)) {
which_keep <- sample.int(2,1)
lst[[i]] <- lst[[i]][[2]][[which_keep]]
} else {
lst[[i]] <- replacement
}
return(lst)
}
}
lst[[i]] <- drop_switch_feature(lst[[i]], count, target, replacement)
}
}
return(lst)  # Return the modified list
}
flat_elements_s <- unlist(feature4$eq[-1])
switch <- sample(c(1:length(flat_elements_s)), 1)
switch_final <- flat_elements_s[switch]
count <- sum(flat_elements_s[1:switch]==switch_final)
test2 <- drop_switch_feature(feature4$eq[-1],count,switch_final,feature3$eq)
testing <- list(eq=c(feature4$eq[1],test1))
class(feature4) <- "feature"
flat_elements <- unlist(feature4$eq)
# Filter elements that are either "Sum" or "Prod"
filtered_elements <- flat_elements[flat_elements %in% c("Sum", "Prod")]
# Randomly sample from "sin", 1, or "y"
switch <- sample(c(1:length(filtered_elements)), 1)
switch_final <- filtered_elements[switch]
count <- sum(filtered_elements[1:switch]==switch_final)
drop_switch_feature(feature4$eq,count,switch_final)
feat.count <- sample.int(n = (min(5, (length(features_short)))-1), size = 1)
feats <- sample.int(n = length(features_short), size = feat.count)
eqs <- features_short[feats]
alphas <- rep(2.2222,length(eqs)+1)
equations <- vector("list", length = length(feats))
for (i in c(1:length(feats))){
current <- eqs[[i]]$eq
equations[[i]] <- list("Prod",list(list(alphas[i+1]),current))
}
sum_equations <- function(equations) {
# Base case: if there's only one equation, return it
if (length(equations) == 1) {
return(equations[[1]])
}
# Recursive case: sum the first equation and the result of summing the rest
return(list("Sum", list(equations[[1]], sum_equations(equations[-1]))))
}
sum <- list("Sum",list(list(alphas[1]),sum_equations(equations)))
equation <- list("Transform",sum)
testing <- list(eq=equation, depth=2.5, width=1, oc=2, alphas=list(1,1,1))
convert_to_string <- function(expression, transforms, labels = FALSE, depth = 0, parenthesize = TRUE) {
if (!(expression[[1]] %in% c(transforms,"Prod","Sum"))){
depth <- depth+1
if (labels[1]!=FALSE && is.character(expression[[1]])){
if (startsWith(expression[[1]],"x")){
index <- strtoi(sub("^x", "", expression[[1]]))
return(labels[index])
}
}
return(expression[[1]])
}
if (expression[[1]] %in% transforms){
depth <- depth+1
transform <- expression[[1]]
variable <- convert_to_string(expression[[2]],transforms,labels,depth,FALSE)
return(paste(transform,"(",variable,")",sep=""))
}
if (expression[[1]]=="Prod"){
depth <- depth+1
factor1 <- convert_to_string(expression[[2]][[1]],transforms,labels,depth,TRUE)
factor2 <- convert_to_string(expression[[2]][[2]],transforms,labels,depth,TRUE)
if (depth==1){
return(paste(factor1,"*",factor2,sep=""))
}
else if (parenthesize){
return(paste("(",factor1,"*",factor2,")",sep=""))
} else {
return(paste(factor1,"*",factor2,sep=""))
}
}
if (expression[[1]]=="Sum"){
depth <- depth+1
addend1 <- convert_to_string(expression[[2]][[1]],transforms,labels,depth,TRUE)
addend2 <- convert_to_string(expression[[2]][[2]],transforms,labels,depth,TRUE)
if (depth==1){
return(paste(addend1,"+",addend2, sep=""))
}
else if (parenthesize){
return(paste("(",addend1,"+",addend2,")", sep=""))
} else {
return(paste(addend1,"+",addend2, sep=""))
}
}
}
convert_to_string <- function(expression, transforms, labels = FALSE, round = FALSE, depth = 0, parenthesize = TRUE) {
if (!(expression[[1]] %in% c(transforms,"Prod","Sum"))){
depth <- depth+1
if (is.numeric(round) && !(is.na(suppressWarnings(as.numeric(expression[[1]])))) ){
return(round(as.numeric(expression[[1]]), digits = round(round,0)))
}
if (labels[1]!=FALSE && is.character(expression[[1]])){
if (startsWith(expression[[1]],"x")){
index <- strtoi(sub("^x", "", expression[[1]]))
return(labels[index])
}
}
return(expression[[1]])
}
if (expression[[1]] %in% transforms){
depth <- depth+1
transform <- expression[[1]]
variable <- convert_to_string(expression[[2]],transforms,labels,depth,FALSE)
return(paste(transform,"(",variable,")",sep=""))
}
if (expression[[1]]=="Prod"){
depth <- depth+1
factor1 <- convert_to_string(expression[[2]][[1]],transforms,labels,depth,TRUE)
factor2 <- convert_to_string(expression[[2]][[2]],transforms,labels,depth,TRUE)
if (depth==1){
return(paste(factor1,"*",factor2,sep=""))
}
else if (parenthesize){
return(paste("(",factor1,"*",factor2,")",sep=""))
} else {
return(paste(factor1,"*",factor2,sep=""))
}
}
if (expression[[1]]=="Sum"){
depth <- depth+1
addend1 <- convert_to_string(expression[[2]][[1]],transforms,labels,depth,TRUE)
addend2 <- convert_to_string(expression[[2]][[2]],transforms,labels,depth,TRUE)
if (depth==1){
return(paste(addend1,"+",addend2, sep=""))
}
else if (parenthesize){
return(paste("(",addend1,"+",addend2,")", sep=""))
} else {
return(paste(addend1,"+",addend2, sep=""))
}
}
}
print.feature <- function(feature, transforms, labels=FALSE){
equation <- feature$eq
string <- convert_to_string(equation,transforms, labels)
return(string)
}
print.feature(feature4, c("sin","cos","Transform"),labels=c("Høyde","Lengde","Størrelse","Cm","Alder","Transport","Kloakk"))
print.feature(testing, c("sin","cos","Transform"))
calculate_oc <- function(equation,transforms){
flat_elements <- unlist(equation)
filtered_elements <- flat_elements[flat_elements %in% c(transforms,"Sum", "Prod")]
oc <- length(filtered_elements)
return(oc)
}
find_oc(feature4$eq,c("sin","cos"))
find_oc(feature1$eq,c("sin","cos"))
find_oc(list("Prod",list(feature4$eq,feature1$eq)),c("sin","cos"))
is.numeric(FALSE)
print.feature <- function(feature, transforms, labels=FALSE){
equation <- feature$eq
string <- convert_to_string(equation,transforms, labels)
return(string)
}
print.feature(feature4, c("sin","cos","Transform"),labels=c("Høyde","Lengde","Størrelse","Cm","Alder","Transport","Kloakk"))
print.feature(testing, c("sin","cos","Transform"), round=1)
print.feature <- function(feature, transforms, labels=FALSE, round=FALSE){
equation <- feature$eq
string <- convert_to_string(equation,transforms, labels, round)
return(string)
}
print.feature(feature4, c("sin","cos","Transform"),labels=c("Høyde","Lengde","Størrelse","Cm","Alder","Transport","Kloakk"))
print.feature(testing, c("sin","cos","Transform"), round=1)
convert_to_string <- function(expression, transforms, labels = FALSE, round = FALSE, depth = 0, parenthesize = TRUE) {
if (!(expression[[1]] %in% c(transforms,"Prod","Sum"))){
depth <- depth+1
if (is.numeric(round) && !(is.na(suppressWarnings(as.numeric(expression[[1]])))) ){
return(round(as.numeric(expression[[1]]), digits = round(round,0)))
}
if (labels[1]!=FALSE && is.character(expression[[1]])){
if (startsWith(expression[[1]],"x")){
index <- strtoi(sub("^x", "", expression[[1]]))
return(labels[index])
}
}
return(expression[[1]])
}
if (expression[[1]] %in% transforms){
depth <- depth+1
transform <- expression[[1]]
variable <- convert_to_string(expression[[2]],transforms,labels,round,depth,FALSE)
return(paste(transform,"(",variable,")",sep=""))
}
if (expression[[1]]=="Prod"){
depth <- depth+1
factor1 <- convert_to_string(expression[[2]][[1]],transforms,labels,round,depth,TRUE)
factor2 <- convert_to_string(expression[[2]][[2]],transforms,labels,round,depth,TRUE)
if (depth==1){
return(paste(factor1,"*",factor2,sep=""))
}
else if (parenthesize){
return(paste("(",factor1,"*",factor2,")",sep=""))
} else {
return(paste(factor1,"*",factor2,sep=""))
}
}
if (expression[[1]]=="Sum"){
depth <- depth+1
addend1 <- convert_to_string(expression[[2]][[1]],transforms,labels,round,depth,TRUE)
addend2 <- convert_to_string(expression[[2]][[2]],transforms,labels,round,depth,TRUE)
if (depth==1){
return(paste(addend1,"+",addend2, sep=""))
}
else if (parenthesize){
return(paste("(",addend1,"+",addend2,")", sep=""))
} else {
return(paste(addend1,"+",addend2, sep=""))
}
}
}
print.feature <- function(feature, transforms, labels=FALSE, round=FALSE){
equation <- feature$eq
string <- convert_to_string(equation,transforms, labels, round)
return(string)
}
print.feature(feature4, c("sin","cos","Transform"),labels=c("Høyde","Lengde","Størrelse","Cm","Alder","Transport","Kloakk"))
print.feature(testing, c("sin","cos","Transform"), round=1)
